#include<bits/stdc++.h>
#include<windows.h>
#include<stdlib.h>
#include<conio.h>
#include<fstream>
#define MAX_HIGH 70 //MAX: 56
#define MAX_WIDTH 310
#define MAX_SNAKE_LENGTH 21700
using namespace std;
int mp[MAX_WIDTH][MAX_HIGH],premp[MAX_WIDTH][MAX_HIGH],hi,wid,spd;
//0表示空，1表示食物，2、4为蛇头，3、5为蛇身 ，6，8... 
int ply_num,rob_num,fd_num,food_x[1000],food_y[1000],born_x[2],born_y[2];
char op;
struct players{
	int his_w,his_t,x[MAX_SNAKE_LENGTH],y[MAX_SNAKE_LENGTH];
	int id,lens,prehead,pretail,lv;//上一次在这次的上为1，下为2，左为3，右为4 
} ply[2];//ply[0] VS ply[1] 
struct robots{
	int x[MAX_SNAKE_LENGTH],y[MAX_SNAKE_LENGTH];
	int dx,dy,lens=1,prehead,aim;// rob.prehead 与 ply.prehead 相反！
	bool fodr,df[MAX_SNAKE_LENGTH],alive=true,ob[5];//上为1，下为2，左为3，右为4
} rob[100];
ifstream fin;
ofstream fout;
int walh[100000],l;
bool flag,alive_1=true,alive_2=true,eat,s;

int color(string col);
void gotoxy(int x,int y);
void init();
void history();
void print();
void generate(int p);
void rob_fway(int p);
void rob_generate(int p); 
void input();
void ed();

void gotoxy(int x,int y){
	COORD pos={x,y};
	HANDLE hOut=GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleCursorPosition(hOut,pos);
}
void init(){
	system("mode con cols=110 lines=55");
	memset(mp,0,sizeof(mp));
	fin.clear();
	fout.clear();
	for(int i=1;i<=fd_num;i++){
		food_x[i]=rand()%(hi-3)+1;
		food_y[i]=rand()%(wid-3)+1;
		mp[food_x[i]][food_y[i]]=1;
	}op=0;
	for(int i=0;i<ply_num;i++){
		memset(ply[i].x,0,sizeof(ply[i].x)); memset(ply[i].y,0,sizeof(ply[i].y));
		ply[i].lens=1; ply[i].prehead=0; ply[i].pretail=0;
	}for(int i=0;i<rob_num;i++){
		memset(rob[i].x,0,sizeof(rob[i].x)); memset(rob[i].y,0,sizeof(rob[i].y));
		rob[i].lens=1; rob[i].prehead=0;
	}ply[0].x[0]=hi/2; ply[0].y[0]=wid/2;
	mp[hi/2][wid/2]=2;
	if(ply_num==2){
		ply[0].x[0]=hi/3; ply[0].y[0]=wid/3;
		ply[1].x[0]=hi/3*2; ply[1].y[0]=wid/3*2;
		mp[hi/3][wid/3]=2; mp[hi/3*2][wid/3*2]=4; mp[hi/2][wid/2]=0;
	}for(int i=0;i<rob_num;i++){
		memset(rob[i].x,0,sizeof(rob[i].x)); memset(rob[i].y,0,sizeof(rob[i].y));
		rob[i].x[0]=rand()%(hi-3)+3; rob[i].y[0]=rand()%(wid-3)+3;
		rob[i].dx=0; rob[i].dy=0; rob[i].lens=1; rob[i].prehead=0; rob[i].aim=0;
		memset(rob[i].df,0,sizeof(rob[i].df)); rob[i].fodr=0;
	}
	flag=false; alive_1=true; alive_2=true; eat=false; s=false;
}
int color(string col){
	HANDLE hout=GetStdHandle(STD_OUTPUT_HANDLE);
    if(col=="red"){
    	SetConsoleTextAttribute(hout,FOREGROUND_INTENSITY|FOREGROUND_RED);
	}else if(col=="yellow"){
	    SetConsoleTextAttribute(hout,FOREGROUND_INTENSITY|FOREGROUND_RED|FOREGROUND_GREEN);
	}else if(col=="blue"){
		SetConsoleTextAttribute(hout,FOREGROUND_INTENSITY|FOREGROUND_BLUE);
	}else if(col=="green"){
		SetConsoleTextAttribute(hout,FOREGROUND_INTENSITY|FOREGROUND_GREEN);
	}else if(col=="purple"){
		SetConsoleTextAttribute(hout,FOREGROUND_INTENSITY|FOREGROUND_RED|FOREGROUND_BLUE);
	}else if(col=="white"){
		SetConsoleTextAttribute(hout,FOREGROUND_INTENSITY|FOREGROUND_RED|FOREGROUND_BLUE|FOREGROUND_GREEN);
	}
}
void history(){
	int vof=0,wol=0;
	if(ply[0].id==1){
		fin.open("FILE/User1");
		while(fin>>vof){
			fin>>wol;
			if(vof==ply[1].id){
				ply[0].his_t++;
				if(wol) ply[0].his_w++;
			}walh[l]=vof; walh[l+1]=wol; l+=2;
		}fin.close();
	}
}
void print(){
	if(!s){
		gotoxy(0,0);
		color("white");
		for(int i=0;i<=wid;i++) printf(" 0");
		printf("\n");
		for(int i=0;i<hi;i++){
			color("white");
			printf("0");
			for(int j=0;j<wid;j++){
				if(mp[i][j]==0) printf(" ");
				else if(mp[i][j]==1){
					color("yellow");
					printf("*");
				}else if(mp[i][j]==2){
					color("red");
					printf("@");
				}else if(mp[i][j]==4){
					color("blue");
					printf("@");
				}else if(mp[i][j]==3){
					color("red");
					printf("+");
				}else if(mp[i][j]==5){
					color("blue");
					printf("+");
				}else if(mp[i][j]>5 && !mp[i][j]%2){
					color("white");
					printf("@");
				}else if(mp[i][j]>5 && mp[i][j]%2){
					color("white");
					printf("+");
				}else{
					color("white");
					printf("@");
				}color("white"); printf(" ");
			}color("white"); printf("0\n");
		}color("white");
		for(int i=0;i<=wid+1;i++) printf("0 ");
		if(ply_num>=1) printf("\n\nPlayer 1：%d              \n",ply[0].lens);
		if(ply_num>=2) printf("Player 2：%d              \n",ply[1].lens);
	}
	if(s){
		for(int i=0;i<hi;i++){
			for(int j=0;j<wid;j++){
				if(premp[i][j]!=mp[i][j]){
					gotoxy(j*2+1,i+1);
					if(mp[i][j]==0){
						printf(" ");
					}else if(mp[i][j]==1){
						color("yellow");
						printf("*");
					}else if(mp[i][j]==2){
						color("red");
						printf("@");
					}else if(mp[i][j]==4){
						color("blue");
						printf("@");
					}else if(mp[i][j]==3){
						color("red");
						printf("+");
					}else if(mp[i][j]==5){
						color("blue");
						printf("+");
					}else if(mp[i][j]>5 && !mp[i][j]%2){
						color("white");
						printf("@");
					}else if(mp[i][j]>5 && mp[i][j]%2){
						color("white");
						printf("+");
					}else{
						color("white");
						printf("@");
					}
				}premp[i][j]=mp[i][j];
			}
		}gotoxy(0,hi+3); color("white");
		if(ply_num>=1) printf("Player 1：%d              \n",ply[0].lens);
		if(ply_num>=2) printf("Player 2：%d              \n",ply[1].lens);
		gotoxy(0,0);
	}return;
}
void generate(int p){
	for(int i=1;i<=fd_num;i++){
		if(food_x[i]-ply[p].x[0]==1 || food_x[i]==ply[p].x[0] || ply[p].x[0]-food_x[i]==1){
			if(food_y[i]-ply[p].y[0]==1 || food_y[i]==ply[p].y[0] || ply[p].y[0]-food_y[i]==1){
				ply[p].lens++; mp[food_x[i]][food_y[i]]=0;
 	    		food_x[i]=rand()%(hi-3)+1;
				food_y[i]=rand()%(wid-3)+1;
 	    		mp[food_x[i]][food_y[i]]=1;
 	    		break;
			}
		}
	}for(int i=0;i<rob_num;i++){
		if(!rob[i].alive){
			for(int j=0;j<rob[i].lens;j++){
				if(rob[i].x[j]-ply[p].x[0]==1 || rob[i].x[j]==ply[p].x[0] || ply[p].x[0]-rob[i].x[j]==1){
					if(rob[i].y[j]-ply[p].y[0]==1 || rob[i].y[j]==ply[p].y[0] || ply[p].y[0]-rob[i].y[j]==1){
						if(!rob[i].df[j]){
							ply[p].lens++; mp[rob[i].x[j]][rob[i].y[j]]=0;
							rob[i].df[j]=true; break;
						}
					}
				}
			}
		}
	}for(int i=0;i<rob_num;i++){
		if(rob[i].alive){
			for(int j=0;j<rob[i].lens;j++){
				if(ply[p].x[0]==rob[i].x[j] && ply[p].y[0]==rob[i].y[j]){
					if(p==0){
	 					alive_1=false; ed();
					}if(p==1){
	 					alive_2=false; ed();
					}
				}
			}
		}
	}if(p==0){
		for(int i=0;i<ply[1].lens;i++){
			if(ply[0].x[0]==ply[1].x[i] && ply[0].y[0]==ply[1].y[i]) alive_1=false;
		}if(!alive_1) ed();
	}if(p==1){
		for(int i=0;i<ply[0].lens;i++){
			if(ply[1].x[0]==ply[0].x[i] && ply[1].y[0]==ply[0].y[i]) alive_2=false;
		}if(!alive_2) ed();
	}if(ply[p].x[0]>=hi || ply[p].x[0]<0 || ply[p].y[0]>=wid || ply[p].y[0]<0){
	 	if(p==0){
	 		alive_1=false; ed();
		}if(p==1){
	 		alive_2=false; ed();
		}
	}else{
		for(int i=ply[p].lens;i>0;i--){
			ply[p].x[i]=ply[p].x[i-1];
			ply[p].y[i]=ply[p].y[i-1];
		}if(ply[p].prehead==1) ply[p].x[0]--;
		if(ply[p].prehead==2) ply[p].x[0]++;
		if(ply[p].prehead==3) ply[p].y[0]++;
		if(ply[p].prehead==4) ply[p].y[0]--;
		mp[ply[p].x[0]][ply[p].y[0]]=2*p+2;
		mp[ply[p].x[1]][ply[p].y[1]]=2*p+3;
		mp[ply[p].x[ply[p].lens]][ply[p].y[ply[p].lens]]=0;
	}return;
}
void rob_fway(int p){
	if((rob[p].dx==0 && rob[p].dy==0) || mp[food_x[rob[p].aim]][food_y[rob[p].aim]]!=1){// 机器人自动寻路模块
		int l_sum=1024,l_i=0,sum=0;
		for(int i=1;i<=fd_num;i++){
			sum=abs(food_x[i]-rob[p].x[0])+abs(food_y[i]-rob[p].y[0]);
			if(sum<l_sum){
				l_sum=sum; l_i=i; rob[p].aim=l_i;
			}
		}rob[p].dx=food_x[l_i]-rob[p].x[0];
		rob[p].dy=food_y[l_i]-rob[p].y[0];
		/*for(int i=0;i<rob_num;i++){
			if(!rob[i].alive && i!=p){
				for(int j=0;j<rob[i].lens;j++){
					sum=abs(rob[i].x[j]-rob[p].x[0])+abs(rob[i].y[j]-rob[p].y[0]);
					if(sum<l_sum){
						l_sum=sum; l_i=i; rob[p].aim=l_i;
					}
				}
			}
		}*/
	}return;
}
void rob_generate(int p){
	if(rob[p].alive){
		for(int i=1;i<=fd_num;i++){
			if(food_x[i]==rob[p].x[0] && rob[p].y[0]==food_y[i]){
				rob[p].lens++;
				if(rob[p].aim==i){
					rob[p].dx=0; rob[p].dy=0;
				}mp[food_x[i]][food_y[i]]=2*i+7;
 	    		food_x[i]=rand()%(hi-3)+1;
				food_y[i]=rand()%(wid-3)+1;
 	    		mp[food_x[i]][food_y[i]]=1;
 	    		break;
			}
		}for(int i=0;i<rob_num;i++){
			if(!rob[i].alive){
				for(int j=0;j<rob[i].lens;j++){
					if(rob[i].x[j]-rob[p].x[0]==1 || rob[i].x[j]==rob[p].x[0] || rob[p].x[0]-rob[i].x[j]==1){
						if(rob[i].y[j]-rob[p].y[0]==1 || rob[i].y[j]==rob[p].y[0] || rob[p].y[0]-rob[i].y[j]==1){
							if(!rob[i].df[j]){
								rob[p].lens++; mp[rob[i].x[j]][rob[i].y[j]]=0;
								rob[i].df[j]=true; flag=true; break;
							}
						}
					}
				}if(flag) break;
			}flag=false;
		}rob_fway(p);
		memset(rob[p].ob,0,sizeof(rob[p].ob)); rob[p].prehead=0;//机器人避障模块
		if(mp[rob[p].x[0]+1][rob[p].y[0]]!=0 && mp[rob[p].x[0]+1][rob[p].y[0]]!=1) rob[p].ob[2]=true;
		if(mp[rob[p].x[0]-1][rob[p].y[0]]!=0 && mp[rob[p].x[0]-1][rob[p].y[0]]!=1) rob[p].ob[1]=true;
		if(mp[rob[p].x[0]][rob[p].y[0]-1]!=0 && mp[rob[p].x[0]][rob[p].y[0]-1]!=1) rob[p].ob[4]=true;
		if(mp[rob[p].x[0]][rob[p].y[0]+1]!=0 && mp[rob[p].x[0]][rob[p].y[0]+1]!=1) rob[p].ob[3]=true;
		if(rob[p].dx!=0){
			if(rob[p].dx>0 && !rob[p].ob[1]){
				rob[p].prehead=2; rob[p].dx--;
			}if(rob[p].dx<0 && !rob[p].ob[2]){
				rob[p].prehead=1; rob[p].dx++;
			}
		}if(rob[p].dx==0 && rob[p].dy!=0){
			if(rob[p].dy<0 && !rob[p].ob[3]){
				rob[p].prehead=4; rob[p].dy++;
			}if(rob[p].dy>0 && !rob[p].ob[4]){
				rob[p].prehead=3; rob[p].dy--;
			}
		}if(rob[p].ob[rob[p].prehead]){
			for(int i=1;i<=4;i++){
				if(!rob[p].ob[i] && i!=rob[p].prehead){
					rob[p].prehead=i;
					break;
				}
			}
		}if(rob[p].x[0]>=hi || rob[p].x[0]<0 || rob[p].y[0]>=wid || rob[p].y[0]<0) rob[p].alive=false;
		for(int i=0;i<ply_num;i++){
			for(int j=0;j<ply[i].lens;i++){
				if(rob[p].x[0]==ply[i].x[j] && rob[p].y[0]==ply[i].y[0]) rob[p].alive=false;
			}
		}for(int i=0;i<rob_num;i++){
			if(i!=p && rob[i].alive){
				for(int j=0;j<rob[i].lens;j++){
					if(rob[p].x[0]==rob[i].x[j] && rob[p].y[0]==rob[i].y[0]) rob[p].alive=false;
				}
			}
		}for(int i=rob[p].lens;i>0;i--){
			rob[p].x[i]=rob[p].x[i-1];
			rob[p].y[i]=rob[p].y[i-1];
		}if(rob[p].prehead==1) rob[p].x[0]--;
		if(rob[p].prehead==2) rob[p].x[0]++;
		if(rob[p].prehead==3) rob[p].y[0]++;
		if(rob[p].prehead==4) rob[p].y[0]--;
		mp[rob[p].x[0]][rob[p].y[0]]=2*p+6;
		mp[rob[p].x[1]][rob[p].y[1]]=2*p+7;
		mp[rob[p].x[rob[p].lens]][rob[p].y[rob[p].lens]]=0;
		if(!rob[p].alive){
			for(int i=0;i<rob[p].lens;i++){
				mp[rob[p].x[i]][rob[p].y[i]]=1;
			}
		}
	}else{
		for(int i=0;i<rob[p].lens;i++){
			if(!rob[p].df[i]) mp[rob[p].x[i]][rob[p].y[i]]=1;
		}
	}return;
}
void input(){
	op=0;
	if(ply_num==0) s=true;
	if(kbhit()){
		s=true; op=getch();
		if(op=='s') ply[0].prehead=2;
		if(op=='a') ply[0].prehead=4;
		if(op=='w') ply[0].prehead=1;
		if(op=='d') ply[0].prehead=3;
		if(op==80) ply[1].prehead=2;
		if(op==75) ply[1].prehead=4;
		if(op==72) ply[1].prehead=1;
		if(op==77) ply[1].prehead=3;
	}return;
}
void ed(){
	system("mode con cols=59 lines=29"); system("cls");
	if(ply_num==1){
		printf("----------------------------------------------------------\n");
		printf("|                        YOU LOSE!                        |\n");
		printf("----------------------------------------------------------");
		printf("\n\n\nScore:%d",ply[0].lens);
		printf("\n\n\nPress '1' to exit. Press '2' to play again.");
		op=getch();
		if(op=='1') exit(1);
		if(op=='2'){ init(); return; }
	}if(ply_num>=2){
		printf("----------------------------------------------------------\n");
		printf("|");color("red");printf("                      PLAYER");
		if(alive_1) printf(" 1 WIN!                      ");
		if(alive_2) printf(" 2 WIN!                      ");
		color("white");
		printf("|\n----------------------------------------------------------");
		printf("\n\n\nScore: Player 1: %d\n       Player 2: %d",ply[0].lens,ply[1].lens);
		if(alive_1){
			printf("\n\nHistory: Player 1: win: %d lose: %d\n",ply[0].his_w+1,ply[0].his_t-ply[0].his_w);
			printf("         Player 2 : win: %d lose: %d",ply[0].his_t-ply[0].his_w,ply[0].his_w+1);
			ply[0].his_w++; ply[0].his_t++;
			if(ply[0].id==1){
				fout.open("FILE/User1");
				for(int i=0;i<l;i++){
					fout<<walh[i]<<" ";
					if(i%2) fout<<endl;
				}fout<<ply[1].id<<" "<<1<<endl;
				walh[l]=ply[1].id; walh[l+1]=1; l+=2;
				fout.close();
			}
		}else{
			printf("\n\nHistory: Player 1: win: %d lose: %d\n",ply[0].his_w,ply[0].his_t-ply[0].his_w+1);
			printf("         Player 2 : win: %d lose: %d",ply[0].his_t-ply[0].his_w+1,ply[0].his_w);
			ply[0].his_w--; ply[0].his_t++;
			if(ply[0].id==1){
				fout.open("FILE/User1");
				for(int i=0;i<l;i++){
					fout<<walh[i]<<" ";
					if(i%2) fout<<endl;
				}fout<<ply[1].id<<" "<<0<<endl;
				walh[l]=ply[1].id; walh[l+1]=0; l+=2;
				fout.close();
			}
		}printf("\n\n\nPress '1' to exit. Press '2' to play again.");
		op=getch();
		if(op=='1') exit(1);
		if(op=='2'){ init(); return; }
	}return;
}
int main(){
	SetConsoleTitle("Aconsdle_V1.1");
	system("mode con cols=59 lines=30");
	color("white"); cout<<"\n-----------------------------------------------------------\n|     ";
	color("purple"); cout<<"=====";
	color("red"); cout<<"+++++";
	color("yellow"); cout<<"WELCOME TO GLUTTONOUS SNAKE";
	color("red"); cout<<"+++++";
	color("purple"); cout<<"=====";
	color("white"); cout<<"     |\n-----------------------------------------------------------\n\n";
	printf("                 Press any button to start");
	op=getch();op=0;
	system("mode con cols=40 lines=25");
	printf("----------------------------------------\n|");
	color("red"); printf("                Adjust              ");
	color("white"); printf("|\n----------------------------------------\n");
	printf("High:"); scanf("%d",&hi);
	printf("\nWidth:"); scanf("%d",&wid);
	printf("\nSpeed:"); scanf("%d",&spd);
	printf("\nFood:"); scanf("%d",&fd_num);
	printf("\nNumber of robots:"); scanf("%d",&rob_num); rob_num++;
	printf("\nNumber of players:"); scanf("%d",&ply_num);
	if(ply_num>=2){
		printf("\nID of Player 1:   "); scanf("%d",&ply[0].id);
		printf("\nID of Player 2:   "); scanf("%d",&ply[1].id);
		history();
	}ply[0].lens=1; ply[1].lens=1;
	system("mode con cols=52 lines=30");
	printf("                      Loading...\n");
	if(ply_num>=2){
		gotoxy(0,3); printf("History: Player 1: win: %d  lose: %d\n",ply[0].his_w,ply[0].his_t-ply[0].his_w);
		printf("         Player 2: win: %d  lose: %d",ply[0].his_t-ply[0].his_w,ply[0].his_w); gotoxy(0,1);
	}for(int i=0;i<rob_num;i++){
		rob[i].lens=1; rob[i].alive=true;
	}for(int i=1;i<=51;i++){
	    	printf("_");
	    	Sleep(30);
	    	if(i>=45) Sleep(100);
	}Sleep(300);
	for(int i=1;i<=fd_num;i++){
		food_x[i]=rand()%(hi-3)+1;
		food_y[i]=rand()%(wid-3)+1;
		mp[food_x[i]][food_y[i]]=1;
	}if(ply_num>=1){ ply[0].x[0]=hi/2; ply[0].y[0]=wid/2; mp[hi/2][wid/2]=2; }
	if(ply_num==2){
		ply[0].x[0]=hi/3; ply[0].y[0]=wid/3;
		ply[1].x[0]=hi/3*2; ply[1].y[0]=wid/3*2;
		mp[hi/3][wid/3]=2; mp[hi/3*2][wid/3*2]=4; mp[hi/2][wid/2]=0;
	}for(int i=0;i<ply_num;i++){
		born_x[i]=ply[i].x[0]; born_y[i]=ply[i].y[0];
	}for(int i=0;i<rob_num;i++){
		rob[i].x[0]=rand()%(hi-10)+10;
		rob[i].y[0]=rand()%(wid-10)+10;
		mp[rob[i].x[0]][rob[i].y[0]]=2*i+6;
	}system("mode con cols=130 lines=57");
	for(int i=0;i<hi;i++){
		for(int j=0;j<wid;j++){
			premp[i][j]=mp[i][j];
		}
	}while(true){
		print(); input(); Sleep(spd); input();
		if(ply_num>=1){ generate(0); input(); }
		if(ply_num>=2){ generate(1); input(); }
		for(int i=0;i<hi;i++){
			for(int j=0;j<wid;j++){
				mp[i][j]=0;
			}
		}for(int i=1;i<=fd_num;i++){
			mp[food_x[i]][food_y[i]]=1;
		}for(int i=0;i<ply_num;i++){
			for(int j=0;j<ply[i].lens;j++){
				mp[ply[i].x[j]][ply[i].y[j]]=2*i+3;
			}mp[ply[i].x[0]][ply[i].y[0]]--;
		}for(int i=0;i<rob_num;i++){
			rob_generate(i);
			if(rob[i].alive){
				for(int j=0;j<rob[i].lens;j++){
					mp[rob[i].x[j]][rob[i].y[j]]=2*i+7;
				}mp[rob[i].x[0]][rob[i].y[0]]=2*i+6;
			}
		}if(ply_num==0){
			flag=false;
			for(int i=0;i<rob_num;i++){
				if(rob[i].alive) flag=true;
			}if(!flag) ed();
			flag=false;
		}
	}return 0;
}
